// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offboard/offboard.proto

#include "offboard/offboard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActuatorControl_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorControlGroup_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attitude_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttitudeRate_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OffboardResult_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNedYaw_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_offboard_2foffboard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNedYaw_offboard_2foffboard_2eproto;
namespace mavsdk {
namespace rpc {
namespace offboard {
class StartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRequest> _instance;
} _StartRequest_default_instance_;
class StartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartResponse> _instance;
} _StartResponse_default_instance_;
class StopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRequest> _instance;
} _StopRequest_default_instance_;
class StopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopResponse> _instance;
} _StopResponse_default_instance_;
class IsActiveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsActiveRequest> _instance;
} _IsActiveRequest_default_instance_;
class IsActiveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsActiveResponse> _instance;
} _IsActiveResponse_default_instance_;
class SetAttitudeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttitudeRequest> _instance;
} _SetAttitudeRequest_default_instance_;
class SetAttitudeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttitudeResponse> _instance;
} _SetAttitudeResponse_default_instance_;
class SetActuatorControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetActuatorControlRequest> _instance;
} _SetActuatorControlRequest_default_instance_;
class SetActuatorControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetActuatorControlResponse> _instance;
} _SetActuatorControlResponse_default_instance_;
class SetAttitudeRateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttitudeRateRequest> _instance;
} _SetAttitudeRateRequest_default_instance_;
class SetAttitudeRateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttitudeRateResponse> _instance;
} _SetAttitudeRateResponse_default_instance_;
class SetPositionNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPositionNedRequest> _instance;
} _SetPositionNedRequest_default_instance_;
class SetPositionNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPositionNedResponse> _instance;
} _SetPositionNedResponse_default_instance_;
class SetVelocityBodyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetVelocityBodyRequest> _instance;
} _SetVelocityBodyRequest_default_instance_;
class SetVelocityBodyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetVelocityBodyResponse> _instance;
} _SetVelocityBodyResponse_default_instance_;
class SetVelocityNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetVelocityNedRequest> _instance;
} _SetVelocityNedRequest_default_instance_;
class SetVelocityNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetVelocityNedResponse> _instance;
} _SetVelocityNedResponse_default_instance_;
class SetPositionVelocityNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPositionVelocityNedRequest> _instance;
} _SetPositionVelocityNedRequest_default_instance_;
class SetPositionVelocityNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPositionVelocityNedResponse> _instance;
} _SetPositionVelocityNedResponse_default_instance_;
class AttitudeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attitude> _instance;
} _Attitude_default_instance_;
class ActuatorControlGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorControlGroup> _instance;
} _ActuatorControlGroup_default_instance_;
class ActuatorControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorControl> _instance;
} _ActuatorControl_default_instance_;
class AttitudeRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttitudeRate> _instance;
} _AttitudeRate_default_instance_;
class PositionNedYawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionNedYaw> _instance;
} _PositionNedYaw_default_instance_;
class VelocityBodyYawspeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityBodyYawspeed> _instance;
} _VelocityBodyYawspeed_default_instance_;
class VelocityNedYawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityNedYaw> _instance;
} _VelocityNedYaw_default_instance_;
class OffboardResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OffboardResult> _instance;
} _OffboardResult_default_instance_;
}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_ActuatorControl_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_ActuatorControl_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::ActuatorControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::ActuatorControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActuatorControl_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActuatorControl_offboard_2foffboard_2eproto}, {
      &scc_info_ActuatorControlGroup_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_ActuatorControlGroup_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_ActuatorControlGroup_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::ActuatorControlGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::ActuatorControlGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorControlGroup_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorControlGroup_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_Attitude_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_Attitude_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::Attitude();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::Attitude::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Attitude_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Attitude_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_AttitudeRate_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_AttitudeRate_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::AttitudeRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::AttitudeRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttitudeRate_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttitudeRate_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_IsActiveRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_IsActiveRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::IsActiveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::IsActiveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsActiveRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsActiveRequest_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_IsActiveResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_IsActiveResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::IsActiveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::IsActiveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsActiveResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsActiveResponse_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_OffboardResult_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_OffboardResult_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::OffboardResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::OffboardResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OffboardResult_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OffboardResult_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_PositionNedYaw_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_PositionNedYaw_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::PositionNedYaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::PositionNedYaw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNedYaw_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionNedYaw_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetActuatorControlRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetActuatorControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetActuatorControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto}, {
      &scc_info_ActuatorControl_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetActuatorControlResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetActuatorControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetActuatorControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetAttitudeRateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetAttitudeRateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetAttitudeRateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto}, {
      &scc_info_AttitudeRate_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetAttitudeRateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetAttitudeRateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetAttitudeRateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetAttitudeRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetAttitudeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetAttitudeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetAttitudeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAttitudeRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAttitudeRequest_offboard_2foffboard_2eproto}, {
      &scc_info_Attitude_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetAttitudeResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetAttitudeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetAttitudeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetAttitudeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAttitudeResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAttitudeResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetPositionNedRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetPositionNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetPositionNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetPositionNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPositionNedRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPositionNedRequest_offboard_2foffboard_2eproto}, {
      &scc_info_PositionNedYaw_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetPositionNedResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetPositionNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetPositionNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetPositionNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPositionNedResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPositionNedResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetPositionVelocityNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto}, {
      &scc_info_PositionNedYaw_offboard_2foffboard_2eproto.base,
      &scc_info_VelocityNedYaw_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetPositionVelocityNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetVelocityBodyRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetVelocityBodyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetVelocityBodyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto}, {
      &scc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetVelocityBodyResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetVelocityBodyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetVelocityBodyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetVelocityNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetVelocityNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetVelocityNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto}, {
      &scc_info_VelocityNedYaw_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_SetVelocityNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::SetVelocityNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::SetVelocityNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_StartRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_StartRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::StartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::StartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartRequest_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_StartResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_StartResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::StartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::StartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_StopRequest_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_StopRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::StopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::StopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRequest_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRequest_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_StopResponse_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_StopResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::StopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::StopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopResponse_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StopResponse_offboard_2foffboard_2eproto}, {
      &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,}};

static void InitDefaultsscc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_VelocityBodyYawspeed_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::VelocityBodyYawspeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::VelocityBodyYawspeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto}, {}};

static void InitDefaultsscc_info_VelocityNedYaw_offboard_2foffboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::offboard::_VelocityNedYaw_default_instance_;
    new (ptr) ::mavsdk::rpc::offboard::VelocityNedYaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::offboard::VelocityNedYaw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNedYaw_offboard_2foffboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityNedYaw_offboard_2foffboard_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_offboard_2foffboard_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_offboard_2foffboard_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_offboard_2foffboard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_offboard_2foffboard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StartResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::StopResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::IsActiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::IsActiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::IsActiveResponse, is_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRequest, attitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetActuatorControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetActuatorControlRequest, actuator_control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetActuatorControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetActuatorControlResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRateRequest, attitude_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetAttitudeRateResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionNedRequest, position_ned_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionNedResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityBodyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityBodyRequest, velocity_body_yawspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityBodyResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityNedRequest, velocity_ned_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetVelocityNedResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionVelocityNedRequest, position_ned_yaw_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionVelocityNedRequest, velocity_ned_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::SetPositionVelocityNedResponse, offboard_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::Attitude, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::Attitude, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::Attitude, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::Attitude, thrust_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::ActuatorControlGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::ActuatorControlGroup, controls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::ActuatorControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::ActuatorControl, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::AttitudeRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::AttitudeRate, roll_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::AttitudeRate, pitch_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::AttitudeRate, yaw_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::AttitudeRate, thrust_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::PositionNedYaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::PositionNedYaw, north_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::PositionNedYaw, east_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::PositionNedYaw, down_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::PositionNedYaw, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityBodyYawspeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityBodyYawspeed, forward_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityBodyYawspeed, right_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityBodyYawspeed, down_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityBodyYawspeed, yawspeed_deg_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityNedYaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityNedYaw, north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityNedYaw, east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityNedYaw, down_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::VelocityNedYaw, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::OffboardResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::OffboardResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard::OffboardResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::offboard::StartRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::offboard::StartResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::offboard::StopRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::offboard::StopResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::offboard::IsActiveRequest)},
  { 27, -1, sizeof(::mavsdk::rpc::offboard::IsActiveResponse)},
  { 33, -1, sizeof(::mavsdk::rpc::offboard::SetAttitudeRequest)},
  { 39, -1, sizeof(::mavsdk::rpc::offboard::SetAttitudeResponse)},
  { 45, -1, sizeof(::mavsdk::rpc::offboard::SetActuatorControlRequest)},
  { 51, -1, sizeof(::mavsdk::rpc::offboard::SetActuatorControlResponse)},
  { 57, -1, sizeof(::mavsdk::rpc::offboard::SetAttitudeRateRequest)},
  { 63, -1, sizeof(::mavsdk::rpc::offboard::SetAttitudeRateResponse)},
  { 69, -1, sizeof(::mavsdk::rpc::offboard::SetPositionNedRequest)},
  { 75, -1, sizeof(::mavsdk::rpc::offboard::SetPositionNedResponse)},
  { 81, -1, sizeof(::mavsdk::rpc::offboard::SetVelocityBodyRequest)},
  { 87, -1, sizeof(::mavsdk::rpc::offboard::SetVelocityBodyResponse)},
  { 93, -1, sizeof(::mavsdk::rpc::offboard::SetVelocityNedRequest)},
  { 99, -1, sizeof(::mavsdk::rpc::offboard::SetVelocityNedResponse)},
  { 105, -1, sizeof(::mavsdk::rpc::offboard::SetPositionVelocityNedRequest)},
  { 112, -1, sizeof(::mavsdk::rpc::offboard::SetPositionVelocityNedResponse)},
  { 118, -1, sizeof(::mavsdk::rpc::offboard::Attitude)},
  { 127, -1, sizeof(::mavsdk::rpc::offboard::ActuatorControlGroup)},
  { 133, -1, sizeof(::mavsdk::rpc::offboard::ActuatorControl)},
  { 139, -1, sizeof(::mavsdk::rpc::offboard::AttitudeRate)},
  { 148, -1, sizeof(::mavsdk::rpc::offboard::PositionNedYaw)},
  { 157, -1, sizeof(::mavsdk::rpc::offboard::VelocityBodyYawspeed)},
  { 166, -1, sizeof(::mavsdk::rpc::offboard::VelocityNedYaw)},
  { 175, -1, sizeof(::mavsdk::rpc::offboard::OffboardResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_StartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_StartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_StopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_StopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_IsActiveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_IsActiveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetAttitudeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetAttitudeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetActuatorControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetActuatorControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetAttitudeRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetAttitudeRateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetPositionNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetPositionNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetVelocityBodyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetVelocityBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetPositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_SetPositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_Attitude_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_ActuatorControlGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_ActuatorControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_AttitudeRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_PositionNedYaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_VelocityBodyYawspeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_VelocityNedYaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::offboard::_OffboardResult_default_instance_),
};

const char descriptor_table_protodef_offboard_2foffboard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027offboard/offboard.proto\022\023mavsdk.rpc.of"
  "fboard\032\024mavsdk_options.proto\"\016\n\014StartReq"
  "uest\"M\n\rStartResponse\022<\n\017offboard_result"
  "\030\001 \001(\0132#.mavsdk.rpc.offboard.OffboardRes"
  "ult\"\r\n\013StopRequest\"L\n\014StopResponse\022<\n\017of"
  "fboard_result\030\001 \001(\0132#.mavsdk.rpc.offboar"
  "d.OffboardResult\"\021\n\017IsActiveRequest\"%\n\020I"
  "sActiveResponse\022\021\n\tis_active\030\001 \001(\010\"E\n\022Se"
  "tAttitudeRequest\022/\n\010attitude\030\001 \001(\0132\035.mav"
  "sdk.rpc.offboard.Attitude\"S\n\023SetAttitude"
  "Response\022<\n\017offboard_result\030\001 \001(\0132#.mavs"
  "dk.rpc.offboard.OffboardResult\"[\n\031SetAct"
  "uatorControlRequest\022>\n\020actuator_control\030"
  "\001 \001(\0132$.mavsdk.rpc.offboard.ActuatorCont"
  "rol\"Z\n\032SetActuatorControlResponse\022<\n\017off"
  "board_result\030\001 \001(\0132#.mavsdk.rpc.offboard"
  ".OffboardResult\"R\n\026SetAttitudeRateReques"
  "t\0228\n\rattitude_rate\030\001 \001(\0132!.mavsdk.rpc.of"
  "fboard.AttitudeRate\"W\n\027SetAttitudeRateRe"
  "sponse\022<\n\017offboard_result\030\001 \001(\0132#.mavsdk"
  ".rpc.offboard.OffboardResult\"V\n\025SetPosit"
  "ionNedRequest\022=\n\020position_ned_yaw\030\001 \001(\0132"
  "#.mavsdk.rpc.offboard.PositionNedYaw\"V\n\026"
  "SetPositionNedResponse\022<\n\017offboard_resul"
  "t\030\001 \001(\0132#.mavsdk.rpc.offboard.OffboardRe"
  "sult\"c\n\026SetVelocityBodyRequest\022I\n\026veloci"
  "ty_body_yawspeed\030\001 \001(\0132).mavsdk.rpc.offb"
  "oard.VelocityBodyYawspeed\"W\n\027SetVelocity"
  "BodyResponse\022<\n\017offboard_result\030\001 \001(\0132#."
  "mavsdk.rpc.offboard.OffboardResult\"V\n\025Se"
  "tVelocityNedRequest\022=\n\020velocity_ned_yaw\030"
  "\001 \001(\0132#.mavsdk.rpc.offboard.VelocityNedY"
  "aw\"V\n\026SetVelocityNedResponse\022<\n\017offboard"
  "_result\030\001 \001(\0132#.mavsdk.rpc.offboard.Offb"
  "oardResult\"\235\001\n\035SetPositionVelocityNedReq"
  "uest\022=\n\020position_ned_yaw\030\001 \001(\0132#.mavsdk."
  "rpc.offboard.PositionNedYaw\022=\n\020velocity_"
  "ned_yaw\030\002 \001(\0132#.mavsdk.rpc.offboard.Velo"
  "cityNedYaw\"^\n\036SetPositionVelocityNedResp"
  "onse\022<\n\017offboard_result\030\001 \001(\0132#.mavsdk.r"
  "pc.offboard.OffboardResult\"V\n\010Attitude\022\020"
  "\n\010roll_deg\030\001 \001(\002\022\021\n\tpitch_deg\030\002 \001(\002\022\017\n\007y"
  "aw_deg\030\003 \001(\002\022\024\n\014thrust_value\030\004 \001(\002\"(\n\024Ac"
  "tuatorControlGroup\022\020\n\010controls\030\001 \003(\002\"L\n\017"
  "ActuatorControl\0229\n\006groups\030\001 \003(\0132).mavsdk"
  ".rpc.offboard.ActuatorControlGroup\"`\n\014At"
  "titudeRate\022\022\n\nroll_deg_s\030\001 \001(\002\022\023\n\013pitch_"
  "deg_s\030\002 \001(\002\022\021\n\tyaw_deg_s\030\003 \001(\002\022\024\n\014thrust"
  "_value\030\004 \001(\002\"R\n\016PositionNedYaw\022\017\n\007north_"
  "m\030\001 \001(\002\022\016\n\006east_m\030\002 \001(\002\022\016\n\006down_m\030\003 \001(\002\022"
  "\017\n\007yaw_deg\030\004 \001(\002\"h\n\024VelocityBodyYawspeed"
  "\022\023\n\013forward_m_s\030\001 \001(\002\022\021\n\tright_m_s\030\002 \001(\002"
  "\022\020\n\010down_m_s\030\003 \001(\002\022\026\n\016yawspeed_deg_s\030\004 \001"
  "(\002\"X\n\016VelocityNedYaw\022\021\n\tnorth_m_s\030\001 \001(\002\022"
  "\020\n\010east_m_s\030\002 \001(\002\022\020\n\010down_m_s\030\003 \001(\002\022\017\n\007y"
  "aw_deg\030\004 \001(\002\"\242\002\n\016OffboardResult\022:\n\006resul"
  "t\030\001 \001(\0162*.mavsdk.rpc.offboard.OffboardRe"
  "sult.Result\022\022\n\nresult_str\030\002 \001(\t\"\277\001\n\006Resu"
  "lt\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS"
  "\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RESULT_CONNE"
  "CTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\031\n\025RESULT"
  "_COMMAND_DENIED\020\005\022\022\n\016RESULT_TIMEOUT\020\006\022\032\n"
  "\026RESULT_NO_SETPOINT_SET\020\0072\312\010\n\017OffboardSe"
  "rvice\022P\n\005Start\022!.mavsdk.rpc.offboard.Sta"
  "rtRequest\032\".mavsdk.rpc.offboard.StartRes"
  "ponse\"\000\022M\n\004Stop\022 .mavsdk.rpc.offboard.St"
  "opRequest\032!.mavsdk.rpc.offboard.StopResp"
  "onse\"\000\022]\n\010IsActive\022$.mavsdk.rpc.offboard"
  ".IsActiveRequest\032%.mavsdk.rpc.offboard.I"
  "sActiveResponse\"\004\200\265\030\001\022f\n\013SetAttitude\022\'.m"
  "avsdk.rpc.offboard.SetAttitudeRequest\032(."
  "mavsdk.rpc.offboard.SetAttitudeResponse\""
  "\004\200\265\030\001\022{\n\022SetActuatorControl\022..mavsdk.rpc"
  ".offboard.SetActuatorControlRequest\032/.ma"
  "vsdk.rpc.offboard.SetActuatorControlResp"
  "onse\"\004\200\265\030\001\022r\n\017SetAttitudeRate\022+.mavsdk.r"
  "pc.offboard.SetAttitudeRateRequest\032,.mav"
  "sdk.rpc.offboard.SetAttitudeRateResponse"
  "\"\004\200\265\030\001\022o\n\016SetPositionNed\022*.mavsdk.rpc.of"
  "fboard.SetPositionNedRequest\032+.mavsdk.rp"
  "c.offboard.SetPositionNedResponse\"\004\200\265\030\001\022"
  "r\n\017SetVelocityBody\022+.mavsdk.rpc.offboard"
  ".SetVelocityBodyRequest\032,.mavsdk.rpc.off"
  "board.SetVelocityBodyResponse\"\004\200\265\030\001\022o\n\016S"
  "etVelocityNed\022*.mavsdk.rpc.offboard.SetV"
  "elocityNedRequest\032+.mavsdk.rpc.offboard."
  "SetVelocityNedResponse\"\004\200\265\030\001\022\207\001\n\026SetPosi"
  "tionVelocityNed\0222.mavsdk.rpc.offboard.Se"
  "tPositionVelocityNedRequest\0323.mavsdk.rpc"
  ".offboard.SetPositionVelocityNedResponse"
  "\"\004\200\265\030\001B#\n\022io.mavsdk.offboardB\rOffboardPr"
  "otob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_offboard_2foffboard_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_offboard_2foffboard_2eproto_sccs[28] = {
  &scc_info_ActuatorControl_offboard_2foffboard_2eproto.base,
  &scc_info_ActuatorControlGroup_offboard_2foffboard_2eproto.base,
  &scc_info_Attitude_offboard_2foffboard_2eproto.base,
  &scc_info_AttitudeRate_offboard_2foffboard_2eproto.base,
  &scc_info_IsActiveRequest_offboard_2foffboard_2eproto.base,
  &scc_info_IsActiveResponse_offboard_2foffboard_2eproto.base,
  &scc_info_OffboardResult_offboard_2foffboard_2eproto.base,
  &scc_info_PositionNedYaw_offboard_2foffboard_2eproto.base,
  &scc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetAttitudeRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetAttitudeResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetPositionNedRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetPositionNedResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto.base,
  &scc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto.base,
  &scc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto.base,
  &scc_info_StartRequest_offboard_2foffboard_2eproto.base,
  &scc_info_StartResponse_offboard_2foffboard_2eproto.base,
  &scc_info_StopRequest_offboard_2foffboard_2eproto.base,
  &scc_info_StopResponse_offboard_2foffboard_2eproto.base,
  &scc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto.base,
  &scc_info_VelocityNedYaw_offboard_2foffboard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_offboard_2foffboard_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offboard_2foffboard_2eproto = {
  false, false, descriptor_table_protodef_offboard_2foffboard_2eproto, "offboard/offboard.proto", 3651,
  &descriptor_table_offboard_2foffboard_2eproto_once, descriptor_table_offboard_2foffboard_2eproto_sccs, descriptor_table_offboard_2foffboard_2eproto_deps, 28, 1,
  schemas, file_default_instances, TableStruct_offboard_2foffboard_2eproto::offsets,
  file_level_metadata_offboard_2foffboard_2eproto, 28, file_level_enum_descriptors_offboard_2foffboard_2eproto, file_level_service_descriptors_offboard_2foffboard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_offboard_2foffboard_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_offboard_2foffboard_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace offboard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OffboardResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_offboard_2foffboard_2eproto);
  return file_level_enum_descriptors_offboard_2foffboard_2eproto[0];
}
bool OffboardResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OffboardResult_Result OffboardResult::RESULT_UNKNOWN;
constexpr OffboardResult_Result OffboardResult::RESULT_SUCCESS;
constexpr OffboardResult_Result OffboardResult::RESULT_NO_SYSTEM;
constexpr OffboardResult_Result OffboardResult::RESULT_CONNECTION_ERROR;
constexpr OffboardResult_Result OffboardResult::RESULT_BUSY;
constexpr OffboardResult_Result OffboardResult::RESULT_COMMAND_DENIED;
constexpr OffboardResult_Result OffboardResult::RESULT_TIMEOUT;
constexpr OffboardResult_Result OffboardResult::RESULT_NO_SETPOINT_SET;
constexpr OffboardResult_Result OffboardResult::Result_MIN;
constexpr OffboardResult_Result OffboardResult::Result_MAX;
constexpr int OffboardResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StartRequest::InitAsDefaultInstance() {
}
class StartRequest::_Internal {
 public:
};

StartRequest::StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.StartRequest)
}

void StartRequest::SharedCtor() {
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.StartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartRequest::ArenaDtor(void* object) {
  StartRequest* _this = reinterpret_cast< StartRequest* >(object);
  (void)_this;
}
void StartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRequest& StartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.StartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.StartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.StartRequest)
    MergeFrom(*source);
  }
}

void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_StartResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class StartResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const StartResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
StartResponse::_Internal::offboard_result(const StartResponse* msg) {
  return *msg->offboard_result_;
}
StartResponse::StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.StartResponse)
}
StartResponse::StartResponse(const StartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.StartResponse)
}

void StartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

StartResponse::~StartResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.StartResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void StartResponse::ArenaDtor(void* object) {
  StartResponse* _this = reinterpret_cast< StartResponse* >(object);
  (void)_this;
}
void StartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartResponse& StartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void StartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.StartResponse)
  return target;
}

size_t StartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.StartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.StartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.StartResponse)
    MergeFrom(*source);
  }
}

void StartResponse::MergeFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void StartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartResponse::CopyFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResponse::IsInitialized() const {
  return true;
}

void StartResponse::InternalSwap(StartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRequest::InitAsDefaultInstance() {
}
class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.StopRequest)
}

void StopRequest::SharedCtor() {
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.StopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopRequest::ArenaDtor(void* object) {
  StopRequest* _this = reinterpret_cast< StopRequest* >(object);
  (void)_this;
}
void StopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRequest& StopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.StopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.StopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.StopRequest)
    MergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_StopResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class StopResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const StopResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
StopResponse::_Internal::offboard_result(const StopResponse* msg) {
  return *msg->offboard_result_;
}
StopResponse::StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.StopResponse)
}

void StopResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

StopResponse::~StopResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.StopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void StopResponse::ArenaDtor(void* object) {
  StopResponse* _this = reinterpret_cast< StopResponse* >(object);
  (void)_this;
}
void StopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopResponse& StopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void StopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.StopResponse)
  return target;
}

size_t StopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.StopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.StopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.StopResponse)
    MergeFrom(*source);
  }
}

void StopResponse::MergeFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void StopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopResponse::CopyFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopResponse::IsInitialized() const {
  return true;
}

void StopResponse::InternalSwap(StopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsActiveRequest::InitAsDefaultInstance() {
}
class IsActiveRequest::_Internal {
 public:
};

IsActiveRequest::IsActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.IsActiveRequest)
}
IsActiveRequest::IsActiveRequest(const IsActiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.IsActiveRequest)
}

void IsActiveRequest::SharedCtor() {
}

IsActiveRequest::~IsActiveRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.IsActiveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsActiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsActiveRequest::ArenaDtor(void* object) {
  IsActiveRequest* _this = reinterpret_cast< IsActiveRequest* >(object);
  (void)_this;
}
void IsActiveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsActiveRequest& IsActiveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsActiveRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void IsActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.IsActiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsActiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsActiveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.IsActiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.IsActiveRequest)
  return target;
}

size_t IsActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.IsActiveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsActiveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.IsActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsActiveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsActiveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.IsActiveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.IsActiveRequest)
    MergeFrom(*source);
  }
}

void IsActiveRequest::MergeFrom(const IsActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.IsActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IsActiveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.IsActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsActiveRequest::CopyFrom(const IsActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.IsActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsActiveRequest::IsInitialized() const {
  return true;
}

void IsActiveRequest::InternalSwap(IsActiveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsActiveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsActiveResponse::InitAsDefaultInstance() {
}
class IsActiveResponse::_Internal {
 public:
};

IsActiveResponse::IsActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.IsActiveResponse)
}
IsActiveResponse::IsActiveResponse(const IsActiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_active_ = from.is_active_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.IsActiveResponse)
}

void IsActiveResponse::SharedCtor() {
  is_active_ = false;
}

IsActiveResponse::~IsActiveResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.IsActiveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsActiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsActiveResponse::ArenaDtor(void* object) {
  IsActiveResponse* _this = reinterpret_cast< IsActiveResponse* >(object);
  (void)_this;
}
void IsActiveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsActiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsActiveResponse& IsActiveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsActiveResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void IsActiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.IsActiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsActiveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsActiveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.IsActiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.IsActiveResponse)
  return target;
}

size_t IsActiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.IsActiveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsActiveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.IsActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsActiveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsActiveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.IsActiveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.IsActiveResponse)
    MergeFrom(*source);
  }
}

void IsActiveResponse::MergeFrom(const IsActiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.IsActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
}

void IsActiveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.IsActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsActiveResponse::CopyFrom(const IsActiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.IsActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsActiveResponse::IsInitialized() const {
  return true;
}

void IsActiveResponse::InternalSwap(IsActiveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_active_, other->is_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsActiveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttitudeRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetAttitudeRequest_default_instance_._instance.get_mutable()->attitude_ = const_cast< ::mavsdk::rpc::offboard::Attitude*>(
      ::mavsdk::rpc::offboard::Attitude::internal_default_instance());
}
class SetAttitudeRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::Attitude& attitude(const SetAttitudeRequest* msg);
};

const ::mavsdk::rpc::offboard::Attitude&
SetAttitudeRequest::_Internal::attitude(const SetAttitudeRequest* msg) {
  return *msg->attitude_;
}
SetAttitudeRequest::SetAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetAttitudeRequest)
}
SetAttitudeRequest::SetAttitudeRequest(const SetAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude()) {
    attitude_ = new ::mavsdk::rpc::offboard::Attitude(*from.attitude_);
  } else {
    attitude_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetAttitudeRequest)
}

void SetAttitudeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttitudeRequest_offboard_2foffboard_2eproto.base);
  attitude_ = nullptr;
}

SetAttitudeRequest::~SetAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetAttitudeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAttitudeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_;
}

void SetAttitudeRequest::ArenaDtor(void* object) {
  SetAttitudeRequest* _this = reinterpret_cast< SetAttitudeRequest* >(object);
  (void)_this;
}
void SetAttitudeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttitudeRequest& SetAttitudeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttitudeRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.Attitude attitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.Attitude attitude = 1;
  if (this->has_attitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetAttitudeRequest)
  return target;
}

size_t SetAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.Attitude attitude = 1;
  if (this->has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttitudeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttitudeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttitudeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetAttitudeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetAttitudeRequest)
    MergeFrom(*source);
  }
}

void SetAttitudeRequest::MergeFrom(const SetAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude()) {
    _internal_mutable_attitude()->::mavsdk::rpc::offboard::Attitude::MergeFrom(from._internal_attitude());
  }
}

void SetAttitudeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttitudeRequest::CopyFrom(const SetAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudeRequest::IsInitialized() const {
  return true;
}

void SetAttitudeRequest::InternalSwap(SetAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_, other->attitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttitudeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetAttitudeResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetAttitudeResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetAttitudeResponse::_Internal::offboard_result(const SetAttitudeResponse* msg) {
  return *msg->offboard_result_;
}
SetAttitudeResponse::SetAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetAttitudeResponse)
}
SetAttitudeResponse::SetAttitudeResponse(const SetAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetAttitudeResponse)
}

void SetAttitudeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttitudeResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetAttitudeResponse::~SetAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetAttitudeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAttitudeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetAttitudeResponse::ArenaDtor(void* object) {
  SetAttitudeResponse* _this = reinterpret_cast< SetAttitudeResponse* >(object);
  (void)_this;
}
void SetAttitudeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttitudeResponse& SetAttitudeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttitudeResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetAttitudeResponse)
  return target;
}

size_t SetAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttitudeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttitudeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttitudeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetAttitudeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetAttitudeResponse)
    MergeFrom(*source);
  }
}

void SetAttitudeResponse::MergeFrom(const SetAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetAttitudeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttitudeResponse::CopyFrom(const SetAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudeResponse::IsInitialized() const {
  return true;
}

void SetAttitudeResponse::InternalSwap(SetAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetActuatorControlRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetActuatorControlRequest_default_instance_._instance.get_mutable()->actuator_control_ = const_cast< ::mavsdk::rpc::offboard::ActuatorControl*>(
      ::mavsdk::rpc::offboard::ActuatorControl::internal_default_instance());
}
class SetActuatorControlRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::ActuatorControl& actuator_control(const SetActuatorControlRequest* msg);
};

const ::mavsdk::rpc::offboard::ActuatorControl&
SetActuatorControlRequest::_Internal::actuator_control(const SetActuatorControlRequest* msg) {
  return *msg->actuator_control_;
}
SetActuatorControlRequest::SetActuatorControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetActuatorControlRequest)
}
SetActuatorControlRequest::SetActuatorControlRequest(const SetActuatorControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actuator_control()) {
    actuator_control_ = new ::mavsdk::rpc::offboard::ActuatorControl(*from.actuator_control_);
  } else {
    actuator_control_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetActuatorControlRequest)
}

void SetActuatorControlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto.base);
  actuator_control_ = nullptr;
}

SetActuatorControlRequest::~SetActuatorControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetActuatorControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetActuatorControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actuator_control_;
}

void SetActuatorControlRequest::ArenaDtor(void* object) {
  SetActuatorControlRequest* _this = reinterpret_cast< SetActuatorControlRequest* >(object);
  (void)_this;
}
void SetActuatorControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActuatorControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetActuatorControlRequest& SetActuatorControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetActuatorControlRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetActuatorControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actuator_control_ != nullptr) {
    delete actuator_control_;
  }
  actuator_control_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActuatorControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actuator_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActuatorControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
  if (this->has_actuator_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actuator_control(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetActuatorControlRequest)
  return target;
}

size_t SetActuatorControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.ActuatorControl actuator_control = 1;
  if (this->has_actuator_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actuator_control_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetActuatorControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetActuatorControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetActuatorControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetActuatorControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetActuatorControlRequest)
    MergeFrom(*source);
  }
}

void SetActuatorControlRequest::MergeFrom(const SetActuatorControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actuator_control()) {
    _internal_mutable_actuator_control()->::mavsdk::rpc::offboard::ActuatorControl::MergeFrom(from._internal_actuator_control());
  }
}

void SetActuatorControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetActuatorControlRequest::CopyFrom(const SetActuatorControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetActuatorControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActuatorControlRequest::IsInitialized() const {
  return true;
}

void SetActuatorControlRequest::InternalSwap(SetActuatorControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(actuator_control_, other->actuator_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActuatorControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetActuatorControlResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetActuatorControlResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetActuatorControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetActuatorControlResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetActuatorControlResponse::_Internal::offboard_result(const SetActuatorControlResponse* msg) {
  return *msg->offboard_result_;
}
SetActuatorControlResponse::SetActuatorControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetActuatorControlResponse)
}
SetActuatorControlResponse::SetActuatorControlResponse(const SetActuatorControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetActuatorControlResponse)
}

void SetActuatorControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetActuatorControlResponse::~SetActuatorControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetActuatorControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetActuatorControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetActuatorControlResponse::ArenaDtor(void* object) {
  SetActuatorControlResponse* _this = reinterpret_cast< SetActuatorControlResponse* >(object);
  (void)_this;
}
void SetActuatorControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActuatorControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetActuatorControlResponse& SetActuatorControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetActuatorControlResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetActuatorControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActuatorControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActuatorControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetActuatorControlResponse)
  return target;
}

size_t SetActuatorControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetActuatorControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetActuatorControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetActuatorControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetActuatorControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetActuatorControlResponse)
    MergeFrom(*source);
  }
}

void SetActuatorControlResponse::MergeFrom(const SetActuatorControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetActuatorControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetActuatorControlResponse::CopyFrom(const SetActuatorControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetActuatorControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActuatorControlResponse::IsInitialized() const {
  return true;
}

void SetActuatorControlResponse::InternalSwap(SetActuatorControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActuatorControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttitudeRateRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetAttitudeRateRequest_default_instance_._instance.get_mutable()->attitude_rate_ = const_cast< ::mavsdk::rpc::offboard::AttitudeRate*>(
      ::mavsdk::rpc::offboard::AttitudeRate::internal_default_instance());
}
class SetAttitudeRateRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::AttitudeRate& attitude_rate(const SetAttitudeRateRequest* msg);
};

const ::mavsdk::rpc::offboard::AttitudeRate&
SetAttitudeRateRequest::_Internal::attitude_rate(const SetAttitudeRateRequest* msg) {
  return *msg->attitude_rate_;
}
SetAttitudeRateRequest::SetAttitudeRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetAttitudeRateRequest)
}
SetAttitudeRateRequest::SetAttitudeRateRequest(const SetAttitudeRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_rate()) {
    attitude_rate_ = new ::mavsdk::rpc::offboard::AttitudeRate(*from.attitude_rate_);
  } else {
    attitude_rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetAttitudeRateRequest)
}

void SetAttitudeRateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto.base);
  attitude_rate_ = nullptr;
}

SetAttitudeRateRequest::~SetAttitudeRateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAttitudeRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_rate_;
}

void SetAttitudeRateRequest::ArenaDtor(void* object) {
  SetAttitudeRateRequest* _this = reinterpret_cast< SetAttitudeRateRequest* >(object);
  (void)_this;
}
void SetAttitudeRateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudeRateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttitudeRateRequest& SetAttitudeRateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttitudeRateRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetAttitudeRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_rate_ != nullptr) {
    delete attitude_rate_;
  }
  attitude_rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudeRateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudeRateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
  if (this->has_attitude_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  return target;
}

size_t SetAttitudeRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.AttitudeRate attitude_rate = 1;
  if (this->has_attitude_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_rate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttitudeRateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttitudeRateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttitudeRateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetAttitudeRateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetAttitudeRateRequest)
    MergeFrom(*source);
  }
}

void SetAttitudeRateRequest::MergeFrom(const SetAttitudeRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_rate()) {
    _internal_mutable_attitude_rate()->::mavsdk::rpc::offboard::AttitudeRate::MergeFrom(from._internal_attitude_rate());
  }
}

void SetAttitudeRateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttitudeRateRequest::CopyFrom(const SetAttitudeRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudeRateRequest::IsInitialized() const {
  return true;
}

void SetAttitudeRateRequest::InternalSwap(SetAttitudeRateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_rate_, other->attitude_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudeRateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttitudeRateResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetAttitudeRateResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetAttitudeRateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetAttitudeRateResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetAttitudeRateResponse::_Internal::offboard_result(const SetAttitudeRateResponse* msg) {
  return *msg->offboard_result_;
}
SetAttitudeRateResponse::SetAttitudeRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetAttitudeRateResponse)
}
SetAttitudeRateResponse::SetAttitudeRateResponse(const SetAttitudeRateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetAttitudeRateResponse)
}

void SetAttitudeRateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetAttitudeRateResponse::~SetAttitudeRateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAttitudeRateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetAttitudeRateResponse::ArenaDtor(void* object) {
  SetAttitudeRateResponse* _this = reinterpret_cast< SetAttitudeRateResponse* >(object);
  (void)_this;
}
void SetAttitudeRateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttitudeRateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttitudeRateResponse& SetAttitudeRateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttitudeRateResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetAttitudeRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttitudeRateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttitudeRateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  return target;
}

size_t SetAttitudeRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttitudeRateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttitudeRateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttitudeRateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetAttitudeRateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetAttitudeRateResponse)
    MergeFrom(*source);
  }
}

void SetAttitudeRateResponse::MergeFrom(const SetAttitudeRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetAttitudeRateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttitudeRateResponse::CopyFrom(const SetAttitudeRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetAttitudeRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttitudeRateResponse::IsInitialized() const {
  return true;
}

void SetAttitudeRateResponse::InternalSwap(SetAttitudeRateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttitudeRateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPositionNedRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetPositionNedRequest_default_instance_._instance.get_mutable()->position_ned_yaw_ = const_cast< ::mavsdk::rpc::offboard::PositionNedYaw*>(
      ::mavsdk::rpc::offboard::PositionNedYaw::internal_default_instance());
}
class SetPositionNedRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::PositionNedYaw& position_ned_yaw(const SetPositionNedRequest* msg);
};

const ::mavsdk::rpc::offboard::PositionNedYaw&
SetPositionNedRequest::_Internal::position_ned_yaw(const SetPositionNedRequest* msg) {
  return *msg->position_ned_yaw_;
}
SetPositionNedRequest::SetPositionNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetPositionNedRequest)
}
SetPositionNedRequest::SetPositionNedRequest(const SetPositionNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_ned_yaw()) {
    position_ned_yaw_ = new ::mavsdk::rpc::offboard::PositionNedYaw(*from.position_ned_yaw_);
  } else {
    position_ned_yaw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetPositionNedRequest)
}

void SetPositionNedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPositionNedRequest_offboard_2foffboard_2eproto.base);
  position_ned_yaw_ = nullptr;
}

SetPositionNedRequest::~SetPositionNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetPositionNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPositionNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_ned_yaw_;
}

void SetPositionNedRequest::ArenaDtor(void* object) {
  SetPositionNedRequest* _this = reinterpret_cast< SetPositionNedRequest* >(object);
  (void)_this;
}
void SetPositionNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPositionNedRequest& SetPositionNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPositionNedRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetPositionNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ned_yaw_ != nullptr) {
    delete position_ned_yaw_;
  }
  position_ned_yaw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_ned_yaw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  if (this->has_position_ned_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_ned_yaw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetPositionNedRequest)
  return target;
}

size_t SetPositionNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  if (this->has_position_ned_yaw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_ned_yaw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPositionNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPositionNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPositionNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetPositionNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetPositionNedRequest)
    MergeFrom(*source);
  }
}

void SetPositionNedRequest::MergeFrom(const SetPositionNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_ned_yaw()) {
    _internal_mutable_position_ned_yaw()->::mavsdk::rpc::offboard::PositionNedYaw::MergeFrom(from._internal_position_ned_yaw());
  }
}

void SetPositionNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionNedRequest::CopyFrom(const SetPositionNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetPositionNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionNedRequest::IsInitialized() const {
  return true;
}

void SetPositionNedRequest::InternalSwap(SetPositionNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_ned_yaw_, other->position_ned_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPositionNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetPositionNedResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetPositionNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetPositionNedResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetPositionNedResponse::_Internal::offboard_result(const SetPositionNedResponse* msg) {
  return *msg->offboard_result_;
}
SetPositionNedResponse::SetPositionNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetPositionNedResponse)
}
SetPositionNedResponse::SetPositionNedResponse(const SetPositionNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetPositionNedResponse)
}

void SetPositionNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPositionNedResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetPositionNedResponse::~SetPositionNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetPositionNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPositionNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetPositionNedResponse::ArenaDtor(void* object) {
  SetPositionNedResponse* _this = reinterpret_cast< SetPositionNedResponse* >(object);
  (void)_this;
}
void SetPositionNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPositionNedResponse& SetPositionNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPositionNedResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetPositionNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetPositionNedResponse)
  return target;
}

size_t SetPositionNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPositionNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPositionNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPositionNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetPositionNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetPositionNedResponse)
    MergeFrom(*source);
  }
}

void SetPositionNedResponse::MergeFrom(const SetPositionNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetPositionNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionNedResponse::CopyFrom(const SetPositionNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetPositionNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionNedResponse::IsInitialized() const {
  return true;
}

void SetPositionNedResponse::InternalSwap(SetPositionNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetVelocityBodyRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetVelocityBodyRequest_default_instance_._instance.get_mutable()->velocity_body_yawspeed_ = const_cast< ::mavsdk::rpc::offboard::VelocityBodyYawspeed*>(
      ::mavsdk::rpc::offboard::VelocityBodyYawspeed::internal_default_instance());
}
class SetVelocityBodyRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::VelocityBodyYawspeed& velocity_body_yawspeed(const SetVelocityBodyRequest* msg);
};

const ::mavsdk::rpc::offboard::VelocityBodyYawspeed&
SetVelocityBodyRequest::_Internal::velocity_body_yawspeed(const SetVelocityBodyRequest* msg) {
  return *msg->velocity_body_yawspeed_;
}
SetVelocityBodyRequest::SetVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetVelocityBodyRequest)
}
SetVelocityBodyRequest::SetVelocityBodyRequest(const SetVelocityBodyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_body_yawspeed()) {
    velocity_body_yawspeed_ = new ::mavsdk::rpc::offboard::VelocityBodyYawspeed(*from.velocity_body_yawspeed_);
  } else {
    velocity_body_yawspeed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetVelocityBodyRequest)
}

void SetVelocityBodyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto.base);
  velocity_body_yawspeed_ = nullptr;
}

SetVelocityBodyRequest::~SetVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVelocityBodyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_body_yawspeed_;
}

void SetVelocityBodyRequest::ArenaDtor(void* object) {
  SetVelocityBodyRequest* _this = reinterpret_cast< SetVelocityBodyRequest* >(object);
  (void)_this;
}
void SetVelocityBodyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVelocityBodyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVelocityBodyRequest& SetVelocityBodyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetVelocityBodyRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && velocity_body_yawspeed_ != nullptr) {
    delete velocity_body_yawspeed_;
  }
  velocity_body_yawspeed_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityBodyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_body_yawspeed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVelocityBodyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
  if (this->has_velocity_body_yawspeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::velocity_body_yawspeed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  return target;
}

size_t SetVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.VelocityBodyYawspeed velocity_body_yawspeed = 1;
  if (this->has_velocity_body_yawspeed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_body_yawspeed_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVelocityBodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVelocityBodyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVelocityBodyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetVelocityBodyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetVelocityBodyRequest)
    MergeFrom(*source);
  }
}

void SetVelocityBodyRequest::MergeFrom(const SetVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_body_yawspeed()) {
    _internal_mutable_velocity_body_yawspeed()->::mavsdk::rpc::offboard::VelocityBodyYawspeed::MergeFrom(from._internal_velocity_body_yawspeed());
  }
}

void SetVelocityBodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVelocityBodyRequest::CopyFrom(const SetVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityBodyRequest::IsInitialized() const {
  return true;
}

void SetVelocityBodyRequest::InternalSwap(SetVelocityBodyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(velocity_body_yawspeed_, other->velocity_body_yawspeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityBodyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetVelocityBodyResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetVelocityBodyResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetVelocityBodyResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetVelocityBodyResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetVelocityBodyResponse::_Internal::offboard_result(const SetVelocityBodyResponse* msg) {
  return *msg->offboard_result_;
}
SetVelocityBodyResponse::SetVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetVelocityBodyResponse)
}
SetVelocityBodyResponse::SetVelocityBodyResponse(const SetVelocityBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetVelocityBodyResponse)
}

void SetVelocityBodyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetVelocityBodyResponse::~SetVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVelocityBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetVelocityBodyResponse::ArenaDtor(void* object) {
  SetVelocityBodyResponse* _this = reinterpret_cast< SetVelocityBodyResponse* >(object);
  (void)_this;
}
void SetVelocityBodyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVelocityBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVelocityBodyResponse& SetVelocityBodyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetVelocityBodyResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVelocityBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  return target;
}

size_t SetVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVelocityBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVelocityBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVelocityBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetVelocityBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetVelocityBodyResponse)
    MergeFrom(*source);
  }
}

void SetVelocityBodyResponse::MergeFrom(const SetVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetVelocityBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVelocityBodyResponse::CopyFrom(const SetVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityBodyResponse::IsInitialized() const {
  return true;
}

void SetVelocityBodyResponse::InternalSwap(SetVelocityBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetVelocityNedRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetVelocityNedRequest_default_instance_._instance.get_mutable()->velocity_ned_yaw_ = const_cast< ::mavsdk::rpc::offboard::VelocityNedYaw*>(
      ::mavsdk::rpc::offboard::VelocityNedYaw::internal_default_instance());
}
class SetVelocityNedRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::VelocityNedYaw& velocity_ned_yaw(const SetVelocityNedRequest* msg);
};

const ::mavsdk::rpc::offboard::VelocityNedYaw&
SetVelocityNedRequest::_Internal::velocity_ned_yaw(const SetVelocityNedRequest* msg) {
  return *msg->velocity_ned_yaw_;
}
SetVelocityNedRequest::SetVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetVelocityNedRequest)
}
SetVelocityNedRequest::SetVelocityNedRequest(const SetVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_ned_yaw()) {
    velocity_ned_yaw_ = new ::mavsdk::rpc::offboard::VelocityNedYaw(*from.velocity_ned_yaw_);
  } else {
    velocity_ned_yaw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetVelocityNedRequest)
}

void SetVelocityNedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto.base);
  velocity_ned_yaw_ = nullptr;
}

SetVelocityNedRequest::~SetVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_ned_yaw_;
}

void SetVelocityNedRequest::ArenaDtor(void* object) {
  SetVelocityNedRequest* _this = reinterpret_cast< SetVelocityNedRequest* >(object);
  (void)_this;
}
void SetVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVelocityNedRequest& SetVelocityNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetVelocityNedRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && velocity_ned_yaw_ != nullptr) {
    delete velocity_ned_yaw_;
  }
  velocity_ned_yaw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_ned_yaw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
  if (this->has_velocity_ned_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::velocity_ned_yaw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetVelocityNedRequest)
  return target;
}

size_t SetVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 1;
  if (this->has_velocity_ned_yaw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_ned_yaw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SetVelocityNedRequest::MergeFrom(const SetVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_ned_yaw()) {
    _internal_mutable_velocity_ned_yaw()->::mavsdk::rpc::offboard::VelocityNedYaw::MergeFrom(from._internal_velocity_ned_yaw());
  }
}

void SetVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVelocityNedRequest::CopyFrom(const SetVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityNedRequest::IsInitialized() const {
  return true;
}

void SetVelocityNedRequest::InternalSwap(SetVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(velocity_ned_yaw_, other->velocity_ned_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetVelocityNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetVelocityNedResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetVelocityNedResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetVelocityNedResponse::_Internal::offboard_result(const SetVelocityNedResponse* msg) {
  return *msg->offboard_result_;
}
SetVelocityNedResponse::SetVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetVelocityNedResponse)
}
SetVelocityNedResponse::SetVelocityNedResponse(const SetVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetVelocityNedResponse)
}

void SetVelocityNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetVelocityNedResponse::~SetVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetVelocityNedResponse::ArenaDtor(void* object) {
  SetVelocityNedResponse* _this = reinterpret_cast< SetVelocityNedResponse* >(object);
  (void)_this;
}
void SetVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVelocityNedResponse& SetVelocityNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetVelocityNedResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetVelocityNedResponse)
  return target;
}

size_t SetVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetVelocityNedResponse)
    MergeFrom(*source);
  }
}

void SetVelocityNedResponse::MergeFrom(const SetVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVelocityNedResponse::CopyFrom(const SetVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityNedResponse::IsInitialized() const {
  return true;
}

void SetVelocityNedResponse::InternalSwap(SetVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPositionVelocityNedRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetPositionVelocityNedRequest_default_instance_._instance.get_mutable()->position_ned_yaw_ = const_cast< ::mavsdk::rpc::offboard::PositionNedYaw*>(
      ::mavsdk::rpc::offboard::PositionNedYaw::internal_default_instance());
  ::mavsdk::rpc::offboard::_SetPositionVelocityNedRequest_default_instance_._instance.get_mutable()->velocity_ned_yaw_ = const_cast< ::mavsdk::rpc::offboard::VelocityNedYaw*>(
      ::mavsdk::rpc::offboard::VelocityNedYaw::internal_default_instance());
}
class SetPositionVelocityNedRequest::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::PositionNedYaw& position_ned_yaw(const SetPositionVelocityNedRequest* msg);
  static const ::mavsdk::rpc::offboard::VelocityNedYaw& velocity_ned_yaw(const SetPositionVelocityNedRequest* msg);
};

const ::mavsdk::rpc::offboard::PositionNedYaw&
SetPositionVelocityNedRequest::_Internal::position_ned_yaw(const SetPositionVelocityNedRequest* msg) {
  return *msg->position_ned_yaw_;
}
const ::mavsdk::rpc::offboard::VelocityNedYaw&
SetPositionVelocityNedRequest::_Internal::velocity_ned_yaw(const SetPositionVelocityNedRequest* msg) {
  return *msg->velocity_ned_yaw_;
}
SetPositionVelocityNedRequest::SetPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
}
SetPositionVelocityNedRequest::SetPositionVelocityNedRequest(const SetPositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_ned_yaw()) {
    position_ned_yaw_ = new ::mavsdk::rpc::offboard::PositionNedYaw(*from.position_ned_yaw_);
  } else {
    position_ned_yaw_ = nullptr;
  }
  if (from._internal_has_velocity_ned_yaw()) {
    velocity_ned_yaw_ = new ::mavsdk::rpc::offboard::VelocityNedYaw(*from.velocity_ned_yaw_);
  } else {
    velocity_ned_yaw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
}

void SetPositionVelocityNedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto.base);
  ::memset(&position_ned_yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_ned_yaw_) -
      reinterpret_cast<char*>(&position_ned_yaw_)) + sizeof(velocity_ned_yaw_));
}

SetPositionVelocityNedRequest::~SetPositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPositionVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_ned_yaw_;
  if (this != internal_default_instance()) delete velocity_ned_yaw_;
}

void SetPositionVelocityNedRequest::ArenaDtor(void* object) {
  SetPositionVelocityNedRequest* _this = reinterpret_cast< SetPositionVelocityNedRequest* >(object);
  (void)_this;
}
void SetPositionVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPositionVelocityNedRequest& SetPositionVelocityNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPositionVelocityNedRequest_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetPositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ned_yaw_ != nullptr) {
    delete position_ned_yaw_;
  }
  position_ned_yaw_ = nullptr;
  if (GetArena() == nullptr && velocity_ned_yaw_ != nullptr) {
    delete velocity_ned_yaw_;
  }
  velocity_ned_yaw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_ned_yaw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_ned_yaw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  if (this->has_position_ned_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_ned_yaw(this), target, stream);
  }

  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
  if (this->has_velocity_ned_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity_ned_yaw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  return target;
}

size_t SetPositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.PositionNedYaw position_ned_yaw = 1;
  if (this->has_position_ned_yaw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_ned_yaw_);
  }

  // .mavsdk.rpc.offboard.VelocityNedYaw velocity_ned_yaw = 2;
  if (this->has_velocity_ned_yaw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_ned_yaw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SetPositionVelocityNedRequest::MergeFrom(const SetPositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_ned_yaw()) {
    _internal_mutable_position_ned_yaw()->::mavsdk::rpc::offboard::PositionNedYaw::MergeFrom(from._internal_position_ned_yaw());
  }
  if (from.has_velocity_ned_yaw()) {
    _internal_mutable_velocity_ned_yaw()->::mavsdk::rpc::offboard::VelocityNedYaw::MergeFrom(from._internal_velocity_ned_yaw());
  }
}

void SetPositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionVelocityNedRequest::CopyFrom(const SetPositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void SetPositionVelocityNedRequest::InternalSwap(SetPositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPositionVelocityNedRequest, velocity_ned_yaw_)
      + sizeof(SetPositionVelocityNedRequest::velocity_ned_yaw_)
      - PROTOBUF_FIELD_OFFSET(SetPositionVelocityNedRequest, position_ned_yaw_)>(
          reinterpret_cast<char*>(&position_ned_yaw_),
          reinterpret_cast<char*>(&other->position_ned_yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPositionVelocityNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::offboard::_SetPositionVelocityNedResponse_default_instance_._instance.get_mutable()->offboard_result_ = const_cast< ::mavsdk::rpc::offboard::OffboardResult*>(
      ::mavsdk::rpc::offboard::OffboardResult::internal_default_instance());
}
class SetPositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard::OffboardResult& offboard_result(const SetPositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::offboard::OffboardResult&
SetPositionVelocityNedResponse::_Internal::offboard_result(const SetPositionVelocityNedResponse* msg) {
  return *msg->offboard_result_;
}
SetPositionVelocityNedResponse::SetPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
}
SetPositionVelocityNedResponse::SetPositionVelocityNedResponse(const SetPositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offboard_result()) {
    offboard_result_ = new ::mavsdk::rpc::offboard::OffboardResult(*from.offboard_result_);
  } else {
    offboard_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
}

void SetPositionVelocityNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto.base);
  offboard_result_ = nullptr;
}

SetPositionVelocityNedResponse::~SetPositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPositionVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offboard_result_;
}

void SetPositionVelocityNedResponse::ArenaDtor(void* object) {
  SetPositionVelocityNedResponse* _this = reinterpret_cast< SetPositionVelocityNedResponse* >(object);
  (void)_this;
}
void SetPositionVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPositionVelocityNedResponse& SetPositionVelocityNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPositionVelocityNedResponse_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void SetPositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && offboard_result_ != nullptr) {
    delete offboard_result_;
  }
  offboard_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offboard_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offboard_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  return target;
}

size_t SetPositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult offboard_result = 1;
  if (this->has_offboard_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offboard_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void SetPositionVelocityNedResponse::MergeFrom(const SetPositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offboard_result()) {
    _internal_mutable_offboard_result()->::mavsdk::rpc::offboard::OffboardResult::MergeFrom(from._internal_offboard_result());
  }
}

void SetPositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionVelocityNedResponse::CopyFrom(const SetPositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.SetPositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void SetPositionVelocityNedResponse::InternalSwap(SetPositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offboard_result_, other->offboard_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attitude::InitAsDefaultInstance() {
}
class Attitude::_Internal {
 public:
};

Attitude::Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&thrust_value_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(thrust_value_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.Attitude)
}

void Attitude::SharedCtor() {
  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrust_value_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(thrust_value_));
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.Attitude)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attitude::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Attitude::ArenaDtor(void* object) {
  Attitude* _this = reinterpret_cast< Attitude* >(object);
  (void)_this;
}
void Attitude::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attitude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attitude& Attitude::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attitude_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.Attitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrust_value_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(thrust_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attitude::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float thrust_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          thrust_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attitude::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.Attitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  // float thrust_value = 4;
  if (!(this->thrust_value() <= 0 && this->thrust_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_thrust_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.Attitude)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 3;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float thrust_value = 4;
  if (!(this->thrust_value() <= 0 && this->thrust_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attitude::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Attitude* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attitude>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.Attitude)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.Attitude)
    MergeFrom(*source);
  }
}

void Attitude::MergeFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg() <= 0 && from.roll_deg() >= 0)) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
  if (!(from.thrust_value() <= 0 && from.thrust_value() >= 0)) {
    _internal_set_thrust_value(from._internal_thrust_value());
  }
}

void Attitude::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::InternalSwap(Attitude* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attitude, thrust_value_)
      + sizeof(Attitude::thrust_value_)
      - PROTOBUF_FIELD_OFFSET(Attitude, roll_deg_)>(
          reinterpret_cast<char*>(&roll_deg_),
          reinterpret_cast<char*>(&other->roll_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attitude::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorControlGroup::InitAsDefaultInstance() {
}
class ActuatorControlGroup::_Internal {
 public:
};

ActuatorControlGroup::ActuatorControlGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  controls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.ActuatorControlGroup)
}
ActuatorControlGroup::ActuatorControlGroup(const ActuatorControlGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.ActuatorControlGroup)
}

void ActuatorControlGroup::SharedCtor() {
}

ActuatorControlGroup::~ActuatorControlGroup() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.ActuatorControlGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorControlGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorControlGroup::ArenaDtor(void* object) {
  ActuatorControlGroup* _this = reinterpret_cast< ActuatorControlGroup* >(object);
  (void)_this;
}
void ActuatorControlGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorControlGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorControlGroup& ActuatorControlGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorControlGroup_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void ActuatorControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorControlGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float controls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_controls(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_controls(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float controls = 1;
  if (this->_internal_controls_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_controls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.ActuatorControlGroup)
  return target;
}

size_t ActuatorControlGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float controls = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controls_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _controls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.ActuatorControlGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.ActuatorControlGroup)
    MergeFrom(*source);
  }
}

void ActuatorControlGroup::MergeFrom(const ActuatorControlGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
}

void ActuatorControlGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlGroup::CopyFrom(const ActuatorControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.ActuatorControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlGroup::IsInitialized() const {
  return true;
}

void ActuatorControlGroup::InternalSwap(ActuatorControlGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  controls_.InternalSwap(&other->controls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorControl::InitAsDefaultInstance() {
}
class ActuatorControl::_Internal {
 public:
};

ActuatorControl::ActuatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.ActuatorControl)
}
ActuatorControl::ActuatorControl(const ActuatorControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.ActuatorControl)
}

void ActuatorControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActuatorControl_offboard_2foffboard_2eproto.base);
}

ActuatorControl::~ActuatorControl() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.ActuatorControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorControl::ArenaDtor(void* object) {
  ActuatorControl* _this = reinterpret_cast< ActuatorControl* >(object);
  (void)_this;
}
void ActuatorControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorControl& ActuatorControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorControl_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void ActuatorControl::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.ActuatorControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.ActuatorControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.ActuatorControl)
  return target;
}

size_t ActuatorControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.ActuatorControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.offboard.ActuatorControlGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.ActuatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.ActuatorControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.ActuatorControl)
    MergeFrom(*source);
  }
}

void ActuatorControl::MergeFrom(const ActuatorControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.ActuatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
}

void ActuatorControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.ActuatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControl::CopyFrom(const ActuatorControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.ActuatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControl::IsInitialized() const {
  return true;
}

void ActuatorControl::InternalSwap(ActuatorControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttitudeRate::InitAsDefaultInstance() {
}
class AttitudeRate::_Internal {
 public:
};

AttitudeRate::AttitudeRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.AttitudeRate)
}
AttitudeRate::AttitudeRate(const AttitudeRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_deg_s_, &from.roll_deg_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&thrust_value_) -
    reinterpret_cast<char*>(&roll_deg_s_)) + sizeof(thrust_value_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.AttitudeRate)
}

void AttitudeRate::SharedCtor() {
  ::memset(&roll_deg_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrust_value_) -
      reinterpret_cast<char*>(&roll_deg_s_)) + sizeof(thrust_value_));
}

AttitudeRate::~AttitudeRate() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.AttitudeRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttitudeRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttitudeRate::ArenaDtor(void* object) {
  AttitudeRate* _this = reinterpret_cast< AttitudeRate* >(object);
  (void)_this;
}
void AttitudeRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudeRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttitudeRate& AttitudeRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttitudeRate_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void AttitudeRate::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.AttitudeRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thrust_value_) -
      reinterpret_cast<char*>(&roll_deg_s_)) + sizeof(thrust_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float thrust_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          thrust_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.AttitudeRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg_s = 1;
  if (!(this->roll_deg_s() <= 0 && this->roll_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg_s(), target);
  }

  // float pitch_deg_s = 2;
  if (!(this->pitch_deg_s() <= 0 && this->pitch_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg_s(), target);
  }

  // float yaw_deg_s = 3;
  if (!(this->yaw_deg_s() <= 0 && this->yaw_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg_s(), target);
  }

  // float thrust_value = 4;
  if (!(this->thrust_value() <= 0 && this->thrust_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_thrust_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.AttitudeRate)
  return target;
}

size_t AttitudeRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.AttitudeRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg_s = 1;
  if (!(this->roll_deg_s() <= 0 && this->roll_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg_s = 2;
  if (!(this->pitch_deg_s() <= 0 && this->pitch_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg_s = 3;
  if (!(this->yaw_deg_s() <= 0 && this->yaw_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float thrust_value = 4;
  if (!(this->thrust_value() <= 0 && this->thrust_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.AttitudeRate)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.AttitudeRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.AttitudeRate)
    MergeFrom(*source);
  }
}

void AttitudeRate::MergeFrom(const AttitudeRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.AttitudeRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg_s() <= 0 && from.roll_deg_s() >= 0)) {
    _internal_set_roll_deg_s(from._internal_roll_deg_s());
  }
  if (!(from.pitch_deg_s() <= 0 && from.pitch_deg_s() >= 0)) {
    _internal_set_pitch_deg_s(from._internal_pitch_deg_s());
  }
  if (!(from.yaw_deg_s() <= 0 && from.yaw_deg_s() >= 0)) {
    _internal_set_yaw_deg_s(from._internal_yaw_deg_s());
  }
  if (!(from.thrust_value() <= 0 && from.thrust_value() >= 0)) {
    _internal_set_thrust_value(from._internal_thrust_value());
  }
}

void AttitudeRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.AttitudeRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeRate::CopyFrom(const AttitudeRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.AttitudeRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeRate::IsInitialized() const {
  return true;
}

void AttitudeRate::InternalSwap(AttitudeRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttitudeRate, thrust_value_)
      + sizeof(AttitudeRate::thrust_value_)
      - PROTOBUF_FIELD_OFFSET(AttitudeRate, roll_deg_s_)>(
          reinterpret_cast<char*>(&roll_deg_s_),
          reinterpret_cast<char*>(&other->roll_deg_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionNedYaw::InitAsDefaultInstance() {
}
class PositionNedYaw::_Internal {
 public:
};

PositionNedYaw::PositionNedYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.PositionNedYaw)
}
PositionNedYaw::PositionNedYaw(const PositionNedYaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_, &from.north_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.PositionNedYaw)
}

void PositionNedYaw::SharedCtor() {
  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(yaw_deg_));
}

PositionNedYaw::~PositionNedYaw() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.PositionNedYaw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionNedYaw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionNedYaw::ArenaDtor(void* object) {
  PositionNedYaw* _this = reinterpret_cast< PositionNedYaw* >(object);
  (void)_this;
}
void PositionNedYaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionNedYaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionNedYaw& PositionNedYaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionNedYaw_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void PositionNedYaw::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.PositionNedYaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionNedYaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionNedYaw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.PositionNedYaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m = 1;
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m(), target);
  }

  // float east_m = 2;
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m(), target);
  }

  // float down_m = 3;
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m(), target);
  }

  // float yaw_deg = 4;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.PositionNedYaw)
  return target;
}

size_t PositionNedYaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.PositionNedYaw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1;
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m = 2;
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m = 3;
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 4;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionNedYaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.PositionNedYaw)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionNedYaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionNedYaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.PositionNedYaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.PositionNedYaw)
    MergeFrom(*source);
  }
}

void PositionNedYaw::MergeFrom(const PositionNedYaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.PositionNedYaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m() <= 0 && from.north_m() >= 0)) {
    _internal_set_north_m(from._internal_north_m());
  }
  if (!(from.east_m() <= 0 && from.east_m() >= 0)) {
    _internal_set_east_m(from._internal_east_m());
  }
  if (!(from.down_m() <= 0 && from.down_m() >= 0)) {
    _internal_set_down_m(from._internal_down_m());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void PositionNedYaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.PositionNedYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionNedYaw::CopyFrom(const PositionNedYaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.PositionNedYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionNedYaw::IsInitialized() const {
  return true;
}

void PositionNedYaw::InternalSwap(PositionNedYaw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionNedYaw, yaw_deg_)
      + sizeof(PositionNedYaw::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(PositionNedYaw, north_m_)>(
          reinterpret_cast<char*>(&north_m_),
          reinterpret_cast<char*>(&other->north_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionNedYaw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityBodyYawspeed::InitAsDefaultInstance() {
}
class VelocityBodyYawspeed::_Internal {
 public:
};

VelocityBodyYawspeed::VelocityBodyYawspeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.VelocityBodyYawspeed)
}
VelocityBodyYawspeed::VelocityBodyYawspeed(const VelocityBodyYawspeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_m_s_, &from.forward_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yawspeed_deg_s_) -
    reinterpret_cast<char*>(&forward_m_s_)) + sizeof(yawspeed_deg_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.VelocityBodyYawspeed)
}

void VelocityBodyYawspeed::SharedCtor() {
  ::memset(&forward_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawspeed_deg_s_) -
      reinterpret_cast<char*>(&forward_m_s_)) + sizeof(yawspeed_deg_s_));
}

VelocityBodyYawspeed::~VelocityBodyYawspeed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityBodyYawspeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityBodyYawspeed::ArenaDtor(void* object) {
  VelocityBodyYawspeed* _this = reinterpret_cast< VelocityBodyYawspeed* >(object);
  (void)_this;
}
void VelocityBodyYawspeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityBodyYawspeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityBodyYawspeed& VelocityBodyYawspeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityBodyYawspeed_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void VelocityBodyYawspeed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawspeed_deg_s_) -
      reinterpret_cast<char*>(&forward_m_s_)) + sizeof(yawspeed_deg_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityBodyYawspeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yawspeed_deg_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yawspeed_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityBodyYawspeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_m_s = 1;
  if (!(this->forward_m_s() <= 0 && this->forward_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_m_s(), target);
  }

  // float right_m_s = 2;
  if (!(this->right_m_s() <= 0 && this->right_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_m_s(), target);
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  // float yawspeed_deg_s = 4;
  if (!(this->yawspeed_deg_s() <= 0 && this->yawspeed_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yawspeed_deg_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  return target;
}

size_t VelocityBodyYawspeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_m_s = 1;
  if (!(this->forward_m_s() <= 0 && this->forward_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_m_s = 2;
  if (!(this->right_m_s() <= 0 && this->right_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yawspeed_deg_s = 4;
  if (!(this->yawspeed_deg_s() <= 0 && this->yawspeed_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityBodyYawspeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityBodyYawspeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityBodyYawspeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.VelocityBodyYawspeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.VelocityBodyYawspeed)
    MergeFrom(*source);
  }
}

void VelocityBodyYawspeed::MergeFrom(const VelocityBodyYawspeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_m_s() <= 0 && from.forward_m_s() >= 0)) {
    _internal_set_forward_m_s(from._internal_forward_m_s());
  }
  if (!(from.right_m_s() <= 0 && from.right_m_s() >= 0)) {
    _internal_set_right_m_s(from._internal_right_m_s());
  }
  if (!(from.down_m_s() <= 0 && from.down_m_s() >= 0)) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
  if (!(from.yawspeed_deg_s() <= 0 && from.yawspeed_deg_s() >= 0)) {
    _internal_set_yawspeed_deg_s(from._internal_yawspeed_deg_s());
  }
}

void VelocityBodyYawspeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityBodyYawspeed::CopyFrom(const VelocityBodyYawspeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.VelocityBodyYawspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityBodyYawspeed::IsInitialized() const {
  return true;
}

void VelocityBodyYawspeed::InternalSwap(VelocityBodyYawspeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityBodyYawspeed, yawspeed_deg_s_)
      + sizeof(VelocityBodyYawspeed::yawspeed_deg_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityBodyYawspeed, forward_m_s_)>(
          reinterpret_cast<char*>(&forward_m_s_),
          reinterpret_cast<char*>(&other->forward_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityBodyYawspeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityNedYaw::InitAsDefaultInstance() {
}
class VelocityNedYaw::_Internal {
 public:
};

VelocityNedYaw::VelocityNedYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.VelocityNedYaw)
}
VelocityNedYaw::VelocityNedYaw(const VelocityNedYaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_s_, &from.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.VelocityNedYaw)
}

void VelocityNedYaw::SharedCtor() {
  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(yaw_deg_));
}

VelocityNedYaw::~VelocityNedYaw() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.VelocityNedYaw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityNedYaw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityNedYaw::ArenaDtor(void* object) {
  VelocityNedYaw* _this = reinterpret_cast< VelocityNedYaw* >(object);
  (void)_this;
}
void VelocityNedYaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityNedYaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityNedYaw& VelocityNedYaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityNedYaw_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void VelocityNedYaw::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.VelocityNedYaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityNedYaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityNedYaw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.VelocityNedYaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  // float yaw_deg = 4;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.VelocityNedYaw)
  return target;
}

size_t VelocityNedYaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.VelocityNedYaw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 4;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityNedYaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.VelocityNedYaw)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityNedYaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityNedYaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.VelocityNedYaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.VelocityNedYaw)
    MergeFrom(*source);
  }
}

void VelocityNedYaw::MergeFrom(const VelocityNedYaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.VelocityNedYaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m_s() <= 0 && from.north_m_s() >= 0)) {
    _internal_set_north_m_s(from._internal_north_m_s());
  }
  if (!(from.east_m_s() <= 0 && from.east_m_s() >= 0)) {
    _internal_set_east_m_s(from._internal_east_m_s());
  }
  if (!(from.down_m_s() <= 0 && from.down_m_s() >= 0)) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void VelocityNedYaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.VelocityNedYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNedYaw::CopyFrom(const VelocityNedYaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.VelocityNedYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNedYaw::IsInitialized() const {
  return true;
}

void VelocityNedYaw::InternalSwap(VelocityNedYaw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityNedYaw, yaw_deg_)
      + sizeof(VelocityNedYaw::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(VelocityNedYaw, north_m_s_)>(
          reinterpret_cast<char*>(&north_m_s_),
          reinterpret_cast<char*>(&other->north_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityNedYaw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OffboardResult::InitAsDefaultInstance() {
}
class OffboardResult::_Internal {
 public:
};

OffboardResult::OffboardResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard.OffboardResult)
}
OffboardResult::OffboardResult(const OffboardResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_str(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard.OffboardResult)
}

void OffboardResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OffboardResult_offboard_2foffboard_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

OffboardResult::~OffboardResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard.OffboardResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OffboardResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OffboardResult::ArenaDtor(void* object) {
  OffboardResult* _this = reinterpret_cast< OffboardResult* >(object);
  (void)_this;
}
void OffboardResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OffboardResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OffboardResult& OffboardResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OffboardResult_offboard_2foffboard_2eproto.base);
  return *internal_default_instance();
}


void OffboardResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard.OffboardResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OffboardResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::offboard::OffboardResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.offboard.OffboardResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OffboardResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard.OffboardResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.offboard.OffboardResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard.OffboardResult)
  return target;
}

size_t OffboardResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard.OffboardResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.offboard.OffboardResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OffboardResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.offboard.OffboardResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OffboardResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OffboardResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.offboard.OffboardResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.offboard.OffboardResult)
    MergeFrom(*source);
  }
}

void OffboardResult::MergeFrom(const OffboardResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard.OffboardResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void OffboardResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.offboard.OffboardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffboardResult::CopyFrom(const OffboardResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard.OffboardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffboardResult::IsInitialized() const {
  return true;
}

void OffboardResult::InternalSwap(OffboardResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OffboardResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace offboard
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::StartRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::StartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::StartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::StartResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::StartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::StartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::StopRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::StopResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::StopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::StopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::IsActiveRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::IsActiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::IsActiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::IsActiveResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::IsActiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::IsActiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetAttitudeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetAttitudeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetAttitudeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetAttitudeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetActuatorControlRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetActuatorControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetActuatorControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetActuatorControlResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetActuatorControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetActuatorControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetAttitudeRateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetAttitudeRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetAttitudeRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetAttitudeRateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetAttitudeRateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetAttitudeRateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetPositionNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetPositionNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetPositionNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetPositionNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetPositionNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetPositionNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetVelocityBodyRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetVelocityBodyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetVelocityBodyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetVelocityBodyResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetVelocityBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetVelocityBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetPositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::SetPositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::Attitude* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::Attitude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::Attitude >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::ActuatorControlGroup* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::ActuatorControlGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::ActuatorControlGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::ActuatorControl* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::ActuatorControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::ActuatorControl >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::AttitudeRate* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::AttitudeRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::AttitudeRate >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::PositionNedYaw* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::PositionNedYaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::PositionNedYaw >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::VelocityBodyYawspeed* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::VelocityBodyYawspeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::VelocityBodyYawspeed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::VelocityNedYaw* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::VelocityNedYaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::VelocityNedYaw >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard::OffboardResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard::OffboardResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard::OffboardResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
